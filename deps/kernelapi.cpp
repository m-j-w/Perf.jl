/*******************************************************************************
 *
 * Dump revelant constants from the Linux kernel's perf_event API to a julia
 * source file for direct use in the module `Perf.KernelAPI`.
 *
 * After compilation, execute and redirect output
 */

#include <iostream>
#include <sstream>
#include <string>
#include <type_traits>
#include <typeinfo>

// The relevant kernel constants and type definitions are here:
#include <linux/version.h>
#include <linux/perf_event.h>
#include <asm/unistd.h>
//#include <linux/utsname.h>

// Include the map-macro to handle printing of variadic macros
#include "map-macro/map.h"

// Macros to simplify dumping constants

#define DUMPENUMV(v)   std::cout << "     , " #v " = " << v << '\n';
#define DUMPCONST(v)   std::cout << "const " #v " = " << v << '\n';
#define DUMPSIZEOF(v)  std::cout << "const " #v "_size = " << sizeof(v) << '\n';

#define DUMPENUM(e, args...)                                                                    \
  std::cout << "@enum( " #e "::" << inttype_to_julia(std::underlying_type<e>::type()) << '\n';  \
  MAP(DUMPENUMV, args)                                                                          \
  std::cout << "     )\n\n";

template <typename T>
std::string
inttype_to_julia(T t) {
  if (not std::is_integral<T>::value) return "UNKNOWN TYPE";
  return ((std::is_unsigned<T>::value) ? "UInt" : "Int") + std::to_string(sizeof(T)*8);
};

std::string
kernel_version() {
  std::stringstream s;
  s <<  (LINUX_VERSION_CODE >> 16) << "."
    << ((LINUX_VERSION_CODE >>  8) & 0xff) << "."
    << ((LINUX_VERSION_CODE >>  0) & 0xff);
  return s.str();
}

// Additional enum types for otherwise independent constants in the header
// files.
enum perf_txn : uint64_t;

int main() {

  std::cout << "\"\"\"\n";
  std::cout << "# Module LinuxKernelPerfAPI\n\n";
  std::cout << "This module is an autogenerated set of constants and enums defined\n"
            << "mostly by C preprocessor macros in the Linux kernel header files.\n\n";
  std::cout << "These definitions are kernel version and architecture dependent.\n\n";
  std::cout << "Autogeneration from Linux " << kernel_version() << " header files "
            << "took place on " __DATE__ " at " __TIME__ ".\n";
  std::cout << "\"\"\"\n";
  std::cout << "module LinuxKernelPerfAPI\n\n";

  DUMPCONST( LINUX_VERSION_CODE )
  std::cout << "const LINUX_KERNEL_VERSION = v\"" << kernel_version() << "\"\n";

  std::cout << "\n# syscall ids\n";
  DUMPCONST( __NR_perf_event_open )
  DUMPCONST( __NR_getcpu )
  DUMPCONST( __NR_getpid )
  DUMPCONST( __NR_gettid )

  std::cout << '\n';
  DUMPENUM( perf_type_id,
            PERF_TYPE_HARDWARE, PERF_TYPE_SOFTWARE, PERF_TYPE_TRACEPOINT,
            PERF_TYPE_HW_CACHE, PERF_TYPE_RAW, PERF_TYPE_BREAKPOINT, PERF_TYPE_MAX )

  DUMPENUM( perf_hw_id,
            PERF_COUNT_HW_CPU_CYCLES, PERF_COUNT_HW_INSTRUCTIONS, PERF_COUNT_HW_CACHE_REFERENCES,
            PERF_COUNT_HW_CACHE_MISSES, PERF_COUNT_HW_BRANCH_INSTRUCTIONS, PERF_COUNT_HW_BRANCH_MISSES,
            PERF_COUNT_HW_BUS_CYCLES, PERF_COUNT_HW_STALLED_CYCLES_FRONTEND, PERF_COUNT_HW_STALLED_CYCLES_BACKEND,
            PERF_COUNT_HW_REF_CPU_CYCLES, PERF_COUNT_HW_MAX )

  DUMPENUM( perf_hw_cache_id,
            PERF_COUNT_HW_CACHE_L1D, PERF_COUNT_HW_CACHE_L1I, PERF_COUNT_HW_CACHE_LL, PERF_COUNT_HW_CACHE_DTLB,
            PERF_COUNT_HW_CACHE_ITLB, PERF_COUNT_HW_CACHE_BPU, PERF_COUNT_HW_CACHE_NODE, PERF_COUNT_HW_CACHE_MAX )

  DUMPENUM( perf_hw_cache_op_id,
            PERF_COUNT_HW_CACHE_OP_READ, PERF_COUNT_HW_CACHE_OP_WRITE,
            PERF_COUNT_HW_CACHE_OP_PREFETCH, PERF_COUNT_HW_CACHE_OP_MAX )

  DUMPENUM( perf_hw_cache_op_result_id,
            PERF_COUNT_HW_CACHE_RESULT_ACCESS, PERF_COUNT_HW_CACHE_RESULT_MISS,
            PERF_COUNT_HW_CACHE_RESULT_MAX )

  DUMPENUM( perf_sw_ids,
            PERF_COUNT_SW_CPU_CLOCK, PERF_COUNT_SW_TASK_CLOCK, PERF_COUNT_SW_PAGE_FAULTS,
            PERF_COUNT_SW_CONTEXT_SWITCHES, PERF_COUNT_SW_CPU_MIGRATIONS, PERF_COUNT_SW_PAGE_FAULTS_MIN,
            PERF_COUNT_SW_PAGE_FAULTS_MAJ, PERF_COUNT_SW_ALIGNMENT_FAULTS, PERF_COUNT_SW_EMULATION_FAULTS,
            PERF_COUNT_SW_DUMMY, PERF_COUNT_SW_BPF_OUTPUT, PERF_COUNT_SW_MAX )

  DUMPENUM( perf_event_sample_format,
            PERF_SAMPLE_IP, PERF_SAMPLE_TID, PERF_SAMPLE_TIME, PERF_SAMPLE_ADDR, PERF_SAMPLE_READ,
            PERF_SAMPLE_CALLCHAIN, PERF_SAMPLE_ID, PERF_SAMPLE_CPU, PERF_SAMPLE_PERIOD, PERF_SAMPLE_STREAM_ID,
            PERF_SAMPLE_RAW, PERF_SAMPLE_BRANCH_STACK, PERF_SAMPLE_REGS_USER, PERF_SAMPLE_STACK_USER,
            PERF_SAMPLE_WEIGHT, PERF_SAMPLE_DATA_SRC, PERF_SAMPLE_IDENTIFIER, PERF_SAMPLE_TRANSACTION,
            PERF_SAMPLE_REGS_INTR, PERF_SAMPLE_MAX )

  DUMPENUM( perf_branch_sample_type_shift,
            PERF_SAMPLE_BRANCH_USER_SHIFT, PERF_SAMPLE_BRANCH_KERNEL_SHIFT, PERF_SAMPLE_BRANCH_HV_SHIFT,
            PERF_SAMPLE_BRANCH_ANY_SHIFT, PERF_SAMPLE_BRANCH_ANY_CALL_SHIFT, PERF_SAMPLE_BRANCH_ANY_RETURN_SHIFT,
            PERF_SAMPLE_BRANCH_IND_CALL_SHIFT, PERF_SAMPLE_BRANCH_ABORT_TX_SHIFT, PERF_SAMPLE_BRANCH_IN_TX_SHIFT,
            PERF_SAMPLE_BRANCH_NO_TX_SHIFT, PERF_SAMPLE_BRANCH_COND_SHIFT, PERF_SAMPLE_BRANCH_CALL_STACK_SHIFT,
            PERF_SAMPLE_BRANCH_IND_JUMP_SHIFT, PERF_SAMPLE_BRANCH_CALL_SHIFT, PERF_SAMPLE_BRANCH_MAX_SHIFT )

  DUMPENUM( perf_branch_sample_type,
            PERF_SAMPLE_BRANCH_USER, PERF_SAMPLE_BRANCH_KERNEL, PERF_SAMPLE_BRANCH_HV, PERF_SAMPLE_BRANCH_ANY,
            PERF_SAMPLE_BRANCH_ANY_CALL, PERF_SAMPLE_BRANCH_ANY_RETURN, PERF_SAMPLE_BRANCH_IND_CALL,
            PERF_SAMPLE_BRANCH_ABORT_TX, PERF_SAMPLE_BRANCH_IN_TX, PERF_SAMPLE_BRANCH_NO_TX, PERF_SAMPLE_BRANCH_COND,
            PERF_SAMPLE_BRANCH_CALL_STACK, PERF_SAMPLE_BRANCH_IND_JUMP, PERF_SAMPLE_BRANCH_CALL,
            PERF_SAMPLE_BRANCH_MAX )

  DUMPENUM( perf_sample_regs_abi,
            PERF_SAMPLE_REGS_ABI_NONE, PERF_SAMPLE_REGS_ABI_32, PERF_SAMPLE_REGS_ABI_64 )

  std::cout << "\n# this is in the original header files _not_ an enum !\n";
  DUMPSIZEOF( PERF_TXN_ABORT_MASK )
  DUMPENUM( perf_txn,
            PERF_TXN_ELISION, PERF_TXN_TRANSACTION, PERF_TXN_SYNC, PERF_TXN_ASYNC, PERF_TXN_RETRY,
            PERF_TXN_CONFLICT, PERF_TXN_CAPACITY_WRITE, PERF_TXN_CAPACITY_READ, PERF_TXN_MAX,
            PERF_TXN_ABORT_MASK, PERF_TXN_ABORT_SHIFT )

  DUMPENUM( perf_event_read_format,
            PERF_FORMAT_TOTAL_TIME_ENABLED, PERF_FORMAT_TOTAL_TIME_RUNNING,
            PERF_FORMAT_ID, PERF_FORMAT_GROUP, PERF_FORMAT_MAX )

  std::cout << "\n# sizes of `perf_event_attr` for various kernel API versions\n";
  DUMPCONST( PERF_ATTR_SIZE_VER0 )
  DUMPCONST( PERF_ATTR_SIZE_VER1 )
  DUMPCONST( PERF_ATTR_SIZE_VER2 )
  DUMPCONST( PERF_ATTR_SIZE_VER3 )
  DUMPCONST( PERF_ATTR_SIZE_VER4 )
  DUMPCONST( PERF_ATTR_SIZE_VER5 )

  std::cout << "\n# size of current implementation of `perf_event_attr`\n";
  DUMPSIZEOF( perf_event_attr )

  std::cout << "\n# `ioctl` ids applicable to perf event file descriptors\n";
  DUMPCONST( PERF_EVENT_IOC_ENABLE )
  DUMPCONST( PERF_EVENT_IOC_DISABLE )
  DUMPCONST( PERF_EVENT_IOC_REFRESH )
  DUMPCONST( PERF_EVENT_IOC_RESET )
  DUMPCONST( PERF_EVENT_IOC_PERIOD )
  DUMPCONST( PERF_EVENT_IOC_SET_OUTPUT )
  DUMPCONST( PERF_EVENT_IOC_SET_FILTER )
  DUMPCONST( PERF_EVENT_IOC_ID )
  DUMPCONST( PERF_EVENT_IOC_SET_BPF )

  std::cout << '\n';
  DUMPENUM( perf_event_ioc_flags, PERF_IOC_FLAG_GROUP )

  DUMPCONST( PERF_RECORD_MISC_CPUMODE_MASK )
  DUMPCONST( PERF_RECORD_MISC_CPUMODE_UNKNOWN )
  DUMPCONST( PERF_RECORD_MISC_KERNEL )
  DUMPCONST( PERF_RECORD_MISC_USER )
  DUMPCONST( PERF_RECORD_MISC_HYPERVISOR )
  DUMPCONST( PERF_RECORD_MISC_GUEST_KERNEL )
  DUMPCONST( PERF_RECORD_MISC_GUEST_USER )
  DUMPCONST( PERF_RECORD_MISC_PROC_MAP_PARSE_TIMEOUT )
  DUMPCONST( PERF_RECORD_MISC_MMAP_DATA )
  DUMPCONST( PERF_RECORD_MISC_COMM_EXEC )
  DUMPCONST( PERF_RECORD_MISC_SWITCH_OUT )
  DUMPCONST( PERF_RECORD_MISC_EXACT_IP )
  DUMPCONST( PERF_RECORD_MISC_EXT_RESERVED )

  DUMPENUM( perf_event_type,
            PERF_RECORD_MMAP, PERF_RECORD_LOST, PERF_RECORD_COMM, PERF_RECORD_EXIT, PERF_RECORD_THROTTLE,
            PERF_RECORD_UNTHROTTLE, PERF_RECORD_FORK, PERF_RECORD_READ, PERF_RECORD_SAMPLE, PERF_RECORD_MMAP2,
            PERF_RECORD_AUX, PERF_RECORD_ITRACE_START, PERF_RECORD_LOST_SAMPLES, PERF_RECORD_SWITCH,
            PERF_RECORD_SWITCH_CPU_WIDE, PERF_RECORD_MAX )

  std::cout << '\n';
  DUMPCONST( PERF_MAX_STACK_DEPTH )
  std::cout << '\n';
  DUMPENUM( perf_callchain_context,
            PERF_CONTEXT_HV, PERF_CONTEXT_KERNEL, PERF_CONTEXT_USER,
            PERF_CONTEXT_GUEST, PERF_CONTEXT_GUEST_KERNEL, PERF_CONTEXT_GUEST_USER,
            PERF_CONTEXT_MAX )

  DUMPCONST( PERF_AUX_FLAG_TRUNCATED )
  DUMPCONST( PERF_AUX_FLAG_OVERWRITE )

  std::cout << '\n';
  DUMPCONST( PERF_FLAG_FD_NO_GROUP )
  DUMPCONST( PERF_FLAG_FD_OUTPUT )
  DUMPCONST( PERF_FLAG_PID_CGROUP )
  DUMPCONST( PERF_FLAG_FD_CLOEXEC )

  std::cout << '\n';
  DUMPCONST( PERF_MEM_OP_NA )
  DUMPCONST( PERF_MEM_OP_LOAD )
  DUMPCONST( PERF_MEM_OP_STORE )
  DUMPCONST( PERF_MEM_OP_PFETCH )
  DUMPCONST( PERF_MEM_OP_EXEC )
  DUMPCONST( PERF_MEM_OP_SHIFT )

  std::cout << '\n';
  DUMPCONST( PERF_MEM_LVL_NA )
  DUMPCONST( PERF_MEM_LVL_HIT )
  DUMPCONST( PERF_MEM_LVL_MISS )
  DUMPCONST( PERF_MEM_LVL_L1 )
  DUMPCONST( PERF_MEM_LVL_LFB )
  DUMPCONST( PERF_MEM_LVL_L2 )
  DUMPCONST( PERF_MEM_LVL_L3 )
  DUMPCONST( PERF_MEM_LVL_LOC_RAM )
  DUMPCONST( PERF_MEM_LVL_REM_RAM1 )
  DUMPCONST( PERF_MEM_LVL_REM_RAM2 )
  DUMPCONST( PERF_MEM_LVL_REM_CCE1 )
  DUMPCONST( PERF_MEM_LVL_REM_CCE2 )
  DUMPCONST( PERF_MEM_LVL_IO )
  DUMPCONST( PERF_MEM_LVL_UNC )
  DUMPCONST( PERF_MEM_LVL_SHIFT )

  std::cout << '\n';
  DUMPCONST( PERF_MEM_SNOOP_NA )
  DUMPCONST( PERF_MEM_SNOOP_NONE )
  DUMPCONST( PERF_MEM_SNOOP_HIT )
  DUMPCONST( PERF_MEM_SNOOP_MISS )
  DUMPCONST( PERF_MEM_SNOOP_HITM )
  DUMPCONST( PERF_MEM_SNOOP_SHIFT )

  std::cout << '\n';
  DUMPCONST( PERF_MEM_LOCK_NA )
  DUMPCONST( PERF_MEM_LOCK_LOCKED )
  DUMPCONST( PERF_MEM_LOCK_SHIFT )

  std::cout << '\n';
  DUMPCONST( PERF_MEM_TLB_NA )
  DUMPCONST( PERF_MEM_TLB_HIT )
  DUMPCONST( PERF_MEM_TLB_MISS )
  DUMPCONST( PERF_MEM_TLB_L1 )
  DUMPCONST( PERF_MEM_TLB_L2 )
  DUMPCONST( PERF_MEM_TLB_WK )
  DUMPCONST( PERF_MEM_TLB_OS )
  DUMPCONST( PERF_MEM_TLB_SHIFT )

  std::cout << "\n# equivalent type for `pid_t`\n";
  std::cout << "const PID_T = " << inttype_to_julia( pid_t() ) << '\n';

  std::cout << "\nend  # autogenerated module LinuxKernelPerfAPI" << '\n';

}

